#!/usr/bin/python3
import numpy as np
import re


def integrate(func, a, b, n):
    h = (b - a) / n
    return h * (
        (0.05 *
         (func(a) + func(b))) + sum([func(a + k * h) for k in range(1, n)]))


def integrate2d(func, ax, bx, ay, by, n):
    h = min((bx - ax), (by - ay)) / n
    corner = 0.25 * (func(ax, ay) + func(ax, by) + func(bx, ay) + func(bx, by))
    edge = 0.5 * (sum([func(ax, ay + i * h) for i in range(1, n)]) +
                  sum([func(bx, ay + i * h) for i in range(1, n)]) +
                  sum([func(ax + i * h, ay) for i in range(1, n)]) +
                  sum([func(ax + i * h, by) for i in range(1, n)]))
    inner = sum([
        sum([func(ax + i * h, ay + k * h)
             for k in range(1, n)])
        for i in range(1, n)
    ])
    return (h**2) * (corner + edge + inner)


def area(a, b, c):
    return (a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] *
            (a[1] - b[1])) / 2


def triangle(func, a, b, c):

    def gen(l2):
        return lambda l1: func(l1 * a[0] + l2 * b[0] + (1 - l1 - l2) * c[0], l1 * a[1] + l2 * b[1] + (1 - l1 - l2) * c[1])

    sub_func = lambda l2: integrate(gen(l2), 0, 1 - l2, 100)
    return 2 * area(a, b, c) * integrate(sub_func, 0, 1, 100)


def gaussQuadrature(func, a, b, c, n=3):
    if n == 1:
        xw = [0.33333333333333, 0.33333333333333, 1.00000000000000]
    elif n == 2:
        xw = [
            0.16666666666667, 0.16666666666667, 0.33333333333333,
            0.16666666666667, 0.66666666666667, 0.33333333333333,
            0.66666666666667, 0.16666666666667, 0.33333333333333
        ]
    elif n == 3:
        xw = [
            0.33333333333333, 0.33333333333333, -0.56250000000000,
            0.20000000000000, 0.20000000000000, 0.52083333333333,
            0.20000000000000, 0.60000000000000, 0.52083333333333,
            0.60000000000000, 0.20000000000000, 0.52083333333333
        ]
    elif n == 4:
        xw = [
            0.44594849091597, 0.44594849091597, 0.22338158967801,
            0.44594849091597, 0.10810301816807, 0.22338158967801,
            0.10810301816807, 0.44594849091597, 0.22338158967801,
            0.09157621350977, 0.09157621350977, 0.10995174365532,
            0.09157621350977, 0.81684757298046, 0.10995174365532,
            0.81684757298046, 0.09157621350977, 0.10995174365532
        ]
    elif n == 5:
        xw = [
            0.33333333333333, 0.33333333333333, 0.22500000000000,
            0.47014206410511, 0.47014206410511, 0.13239415278851,
            0.47014206410511, 0.05971587178977, 0.13239415278851,
            0.05971587178977, 0.47014206410511, 0.13239415278851,
            0.10128650732346, 0.10128650732346, 0.12593918054483,
            0.10128650732346, 0.79742698535309, 0.12593918054483,
            0.79742698535309, 0.10128650732346, 0.12593918054483
        ]
    elif n == 6:
        xw = [
            0.24928674517091, 0.24928674517091, 0.11678627572638,
            0.24928674517091, 0.50142650965818, 0.11678627572638,
            0.50142650965818, 0.24928674517091, 0.11678627572638,
            0.06308901449150, 0.06308901449150, 0.05084490637021,
            0.06308901449150, 0.87382197101700, 0.05084490637021,
            0.87382197101700, 0.06308901449150, 0.05084490637021,
            0.31035245103378, 0.63650249912140, 0.08285107561837,
            0.63650249912140, 0.05314504984482, 0.08285107561837,
            0.05314504984482, 0.31035245103378, 0.08285107561837,
            0.63650249912140, 0.31035245103378, 0.08285107561837,
            0.31035245103378, 0.05314504984482, 0.08285107561837,
            0.05314504984482, 0.63650249912140, 0.08285107561837
        ]
    elif n == 7:
        xw = [
            0.33333333333333, 0.33333333333333, -0.14957004446768,
            0.26034596607904, 0.26034596607904, 0.17561525743321,
            0.26034596607904, 0.47930806784192, 0.17561525743321,
            0.47930806784192, 0.26034596607904, 0.17561525743321,
            0.06513010290222, 0.06513010290222, 0.05334723560884,
            0.06513010290222, 0.86973979419557, 0.05334723560884,
            0.86973979419557, 0.06513010290222, 0.05334723560884,
            0.31286549600487, 0.63844418856981, 0.07711376089026,
            0.63844418856981, 0.04869031542532, 0.07711376089026,
            0.04869031542532, 0.31286549600487, 0.07711376089026,
            0.63844418856981, 0.31286549600487, 0.07711376089026,
            0.31286549600487, 0.04869031542532, 0.07711376089026,
            0.04869031542532, 0.63844418856981, 0.07711376089026
        ]
    elif n == 8:
        xw = [
            0.33333333333333, 0.33333333333333, 0.14431560767779,
            0.45929258829272, 0.45929258829272, 0.09509163426728,
            0.45929258829272, 0.08141482341455, 0.09509163426728,
            0.08141482341455, 0.45929258829272, 0.09509163426728,
            0.17056930775176, 0.17056930775176, 0.10321737053472,
            0.17056930775176, 0.65886138449648, 0.10321737053472,
            0.65886138449648, 0.17056930775176, 0.10321737053472,
            0.05054722831703, 0.05054722831703, 0.03245849762320,
            0.05054722831703, 0.89890554336594, 0.03245849762320,
            0.89890554336594, 0.05054722831703, 0.03245849762320,
            0.26311282963464, 0.72849239295540, 0.02723031417443,
            0.72849239295540, 0.00839477740996, 0.02723031417443,
            0.00839477740996, 0.26311282963464, 0.02723031417443,
            0.72849239295540, 0.26311282963464, 0.02723031417443,
            0.26311282963464, 0.00839477740996, 0.02723031417443,
            0.00839477740996, 0.72849239295540, 0.02723031417443
        ]
    barycentric = lambda l1, l2: func(l1 * a[0] + l2 * b[0] + (1 - l1 - l2) * c[0], l1 * a[1] + l2 * b[1] + (1 - l1 - l2) * c[1])
    return area(a, b, c) * sum([
        xw[i + 2] * barycentric(xw[i], xw[i + 1]) for i in range(0, len(xw), 3)
    ])


def gaussQuadratic(func, a, b, c):
    weights = [1 / 3, 1 / 3, 1 / 3]
    points = [(0, 0.5, 0.5), (0.5, 0, 0.5), (0.5, 0.5, 0)]
    barycentric = lambda l1, l2, l3: func(l1 * a[0] + l2 * b[0] + l3 * c[0], l1 * a[1] + l2 * b[1] + l3 * c[1])
    return area(a, b, c) * sum([
        weights[i] * barycentric(points[i][0], points[i][1], points[i][2])
        for i in range(len(points))
    ])


def input_func(prompt):
    func_string = input(prompt)
    return eval(
        "lambda x, y: " + re.sub(r'(\d)(\w)', 'r\1*\2',
                                 func_string.strip().replace('^', '**')))


def main():
    func = input_func("Enter f(x, y): ")
    ax, bx, ay, by = 0, 5, 0, 5
    a1, b1, c1 = (0, 0), (1, 0), (1, 1)
    a2, b2, c2 = (5, 0), (5, 5), (0, 5)

    print(triangle(func, a1, b1, c1))
    print(gaussQuadratic(func, a1, b1, c1))
    for n in range(1, 9):
        print(n, gaussQuadrature(func, a1, b1, c1, n))


if __name__ == "__main__":
    main()
